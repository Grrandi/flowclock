var _user$project$Main$increment_number = function (number) {
	return _elm_lang$core$Native_Utils.eq(number, 9) ? 0 : (number + 1);
};
var _user$project$Main$someFunction = function (model) {
	var state = model.isRunning;
	return state ? {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Native_Utils.update(
			model,
			{runningSeconds: model.runningSeconds + 1}),
		_1: _elm_lang$core$Platform_Cmd$none
	} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'Tick':
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{tick: _p0._0});
				return _user$project$Main$someFunction(newModel);
			case 'Start':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{runningSeconds: 0, isRunning: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{isRunning: false});
				return _user$project$Main$someFunction(newModel);
		}
	});
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: {tick: 0, runningSeconds: 0, isRunning: false},
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Main$Model = F3(
	function (a, b, c) {
		return {tick: a, runningSeconds: b, isRunning: c};
	});
var _user$project$Main$Stop = {ctor: 'Stop'};
var _user$project$Main$Start = {ctor: 'Start'};
var _user$project$Main$view = function (model) {
	var foo = _elm_lang$core$Basics$turns(
		_elm_lang$core$Time$inMinutes(model.tick));
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(model)),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(model.runningSeconds)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Start),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Start'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Stop),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Stop'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(model.isRunning)),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$Main$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return A2(_elm_lang$core$Time$every, _elm_lang$core$Time$second, _user$project$Main$Tick);
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
